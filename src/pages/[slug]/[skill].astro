---
import SkillsLayout from '@layouts/Skills.astro';
import type { SlugWithSkillTypes, SkillSlugPath } from '@i18n/routes';
import {
  skillsObject,
  techSkillEntries,
  type TechSkill,
} from '@content/techSkills';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
const skillIconImages = import.meta.glob('@assets/skillIcons/*.svg', {
  import: 'default',
});

type Props = Record<string, never>;

type EnglishSkillSlugPaths = {
  [P in SlugWithSkillTypes<'en'>]: {
    params: SkillSlugPath<P>;
  };
};

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = (skills: readonly TechSkill[]): EnglishSkillSlugPaths => {
    return skills.reduce<EnglishSkillSlugPaths>(
      (acc, skill) => ({
        ...acc,
        [`skills/${skill}`]: { params: { slug: 'skills', skill } },
      }),
      {} as EnglishSkillSlugPaths
    );
  };

  const paths = createPaths(techSkillEntries);
  return Object.values(paths);
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

const { skill } = Astro.params;

const skillData = skillsObject[skill];

const svgFile = Object.entries(skillIconImages).find(([file]) =>
  file.includes(skillData.imageSrc)
);

if (!svgFile) {
  throw new Error(`Skill image not found for: ${skillData.imageSrc}`);
}
const imageContent = (await svgFile[1]()) as ImageMetadata;
const techSkill = { ...skillData, iconImage: imageContent };

const pageTitle = skillData.title;
---

<SkillsLayout
  title={pageTitle}
  inert={false}
  techSkill={techSkill}
  seo={{
    openGraph: {
      image: {
        name: 'skills_da',
        alt: t('skills_seo_image_alt'),
      },
    },
    noIndex: false,
  }}
  description={`ðŸ’» Detailed overview of my tech-skills and experience in web development as a frontend-developer. Learn more about my expertise in ${techSkill.title}.`}
/>
