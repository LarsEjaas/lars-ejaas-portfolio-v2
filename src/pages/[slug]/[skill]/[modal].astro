---
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import SkillsLayout from '@layouts/Skills.astro';
import type { SlugWithSkillTypes, SkillSlugPath } from '@i18n/routes';
import {
  skillsObject,
  techSkillEntries,
  type TechSkill,
} from '@content/techSkills';
import type { ImageModule } from '@customTypes/index';
import ModalDialog from '@components/modalDialog/ModalDialog.astro';
import IconContact from '@assets/menuIcons/contact.png';
import IconShare from '@assets/menuIcons/share.png';
import ShareContent from '@components/share/Share.astro';
import ContactContent from '@components/contact/Contact.astro';
const skillIconImages = import.meta.glob('@assets/skillIcons/*.svg');

type EnglishSkillSlugPaths = {
  [P in SlugWithSkillTypes<'en'>]: {
    params: SkillSlugPath<P> & {
      modal: 'share' | 'contact';
    };
  };
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = (skills: readonly TechSkill[]): EnglishSkillSlugPaths => {
    return skills.reduce<EnglishSkillSlugPaths>((acc, skill) => {
      // Create entries for both modal types for each skill
      const contactRoute = {
        [`skills/${skill}/contact`]: {
          params: { slug: 'skills', skill, modal: 'contact' },
        },
      };

      const shareRoute = {
        [`skills/${skill}/share`]: {
          params: { slug: 'skills', skill, modal: 'share' },
        },
      };

      return {
        ...acc,
        ...contactRoute,
        ...shareRoute,
      };
    }, {} as EnglishSkillSlugPaths);
  };

  const paths = createPaths(techSkillEntries);
  return Object.values(paths);
}

const { skill, modal } = Astro.params;

const skillData = skillsObject[lang][skill];

const imageImport = Object.entries(skillIconImages).find(([path]) =>
  path.includes(skillData.imageSrc)
);

if (!imageImport) {
  console.error(`Skill image not found for: ${skillData.imageSrc}`);
  return null;
}
const ImageComponent = ((await imageImport[1]()) as ImageModule).default;

const pageTitle = skillData.title;
const modalTitle = modal === 'share' ? t('share') : t('contact');
const modalIcon = modal === 'share' ? IconShare : IconContact;
const ModalContent = modal === 'share' ? ShareContent : ContactContent;
---

<SkillsLayout
  title={pageTitle}
  inert={false}
  skillTitle={pageTitle}
  skillDescription={skillData.description}
  skillImageAlt={skillData.imageAlt}
  skillImageSrc={ImageComponent}
  skillRating={skillData.rating}
>
  <ModalDialog
    title={modalTitle}
    labels={{ close: t('close_modal_title') }}
    iconImage={modalIcon}
    gradientColor="verdigris"
    ><ModalContent />
  </ModalDialog>
</SkillsLayout>
