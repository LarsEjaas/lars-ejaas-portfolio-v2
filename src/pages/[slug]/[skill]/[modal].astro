---
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import SkillsLayout from '@layouts/Skills.astro';
import type { SlugWithSkillTypes, SkillSlugPath } from '@i18n/routes';
import {
  skillsObject,
  techSkillEntries,
  type TechSkill,
} from '@content/techSkills';
import ModalDialog from '@components/modalDialog/ModalDialog.astro';
import IconContact from '@assets/menuIcons/contact.png';
import IconShare from '@assets/menuIcons/share.png';
import ShareContent from '@components/share/Share.astro';
import ContactContent from '@components/contact/Contact.astro';
import ContactConfirmation from '@components/contact/Confirmation.astro';
import ContactError from '@components/contact/Error.astro';

type Props = {
  skill: TechSkill;
  modal: 'share' | 'contact' | 'message-received' | 'message-error';
};

const skillIconImages = import.meta.glob('@assets/skillIcons/*.svg', {
  query: '?raw',
  import: 'default',
});

type EnglishSkillSlugPaths = {
  [P in SlugWithSkillTypes<'en'>]: {
    params: SkillSlugPath<P> & {
      modal: 'share' | 'contact' | 'message-received' | 'message-error';
    };
  };
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = (skills: readonly TechSkill[]): EnglishSkillSlugPaths => {
    return skills.reduce<EnglishSkillSlugPaths>((acc, skill) => {
      // Create entries for both modal types for each skill
      const contactRoute = {
        [`skills/${skill}/contact`]: {
          params: { slug: 'skills', skill, modal: 'contact' },
        },
        [`skills/${skill}/message-received`]: {
          params: { slug: 'skills', skill, modal: 'message-received' },
        },
        [`skills/${skill}/message-error`]: {
          params: { slug: 'skills', skill, modal: 'message-error' },
        },
      };

      const shareRoute = {
        [`skills/${skill}/share`]: {
          params: { slug: 'skills', skill, modal: 'share' },
        },
      };

      return {
        ...acc,
        ...contactRoute,
        ...shareRoute,
      };
    }, {} as EnglishSkillSlugPaths);
  };

  const paths = createPaths(techSkillEntries);
  return Object.values(paths);
}

const { skill, modal } = Astro.params;

const skillData = skillsObject[skill];

const svgFile = Object.entries(skillIconImages).find(([file]) =>
  file.includes(skillData.imageSrc)
);

if (!svgFile) {
  throw new Error(`Skill image not found for: ${skillData.imageSrc}`);
}
const svgContent = (await svgFile[1]()) as string;
const techSkill = { ...skillData, svgContent };

const pageTitle = skillData.title;
const modalTitle =
  modal === 'share'
    ? t('share')
    : modal === 'contact'
      ? t('contact')
      : modal === 'message-received'
        ? t('thank_you')
        : t('whoops');
const modalIcon = modal === 'share' ? IconShare : IconContact;
const ModalContent =
  modal === 'share'
    ? ShareContent
    : modal === 'contact'
      ? ContactContent
      : modal === 'message-received'
        ? ContactConfirmation
        : ContactError;
const seo =
  modal === 'share'
    ? {
        openGraph: {
          image: {
            name: 'share_en',
            alt: t('share_seo_image_alt'),
          },
        },
        //Only index modalpages on the main index page
        noIndex: true,
      }
    : {
        openGraph: {
          image: {
            name: 'contact_me_en',
            alt: t('contact_seo_image_alt'),
          },
        },
        //Only index modalpages on the main index page
        noIndex: true,
      };
const description =
  modal === 'share' ? t('share_seo_description') : t('contact_seo_description');
---

<SkillsLayout
  title={pageTitle}
  inert={false}
  techSkill={techSkill}
  seo={seo}
  description={description}
>
  <ModalDialog
    title={modalTitle}
    labels={{ close: t('close_modal_title') }}
    iconImage={modalIcon}
    gradientColor="verdigris"
    ><ModalContent />
  </ModalDialog>
</SkillsLayout>
