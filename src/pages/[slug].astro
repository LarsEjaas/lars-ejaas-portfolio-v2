---
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
import type { SlugTypes } from '@i18n/routes';
import About from '@layouts/About.astro';
import Skills, { type TechSkillProps } from '@layouts/Skills.astro';
import Work from '@layouts/work/Work.astro';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import Description from '@content/techSkillDescriptions/Main.astro';
import Archive from '@layouts/Archive.astro';
import EmailReply from '@layouts/EmailReply.astro';

type Props = Record<string, never>;

type EnglishSlugPaths = {
  [K in SlugTypes<'en'>]: { params: { slug: K } };
};

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = <T extends EnglishSlugPaths>(paths: T): T => paths;
  const paths = createPaths({
    work: { params: { slug: 'work' } },
    skills: { params: { slug: 'skills' } },
    about: { params: { slug: 'about' } },
    archive: { params: { slug: 'archive' } },
    'email-reply': { params: { slug: 'email-reply' } },
  });
  return Object.values(paths);
}

const { slug } = Astro.params;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

const englishSlugMap: Record<
  SlugTypes<'en'>,
  {
    component: AstroComponentFactory;
    title: string;
    description: string;
    seo: {
      openGraph: {
        image: {
          name: string;
          alt: string;
        };
      };
      noIndex?: true;
    };
    techSkill?: TechSkillProps;
  }
> = {
  work: {
    component: Work,
    title: t('work'),
    description: t('work_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'work_en',
          alt: t('work_seo_image_alt'),
        },
      },
    },
  },
  skills: {
    component: Skills,
    title: t('skills'),
    techSkill: {
      title: t('tech_skills'),
      description: Description,
    },
    description: t('skills_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'skills_en',
          alt: t('skills_seo_image_alt'),
        },
      },
    },
  },
  about: {
    component: About,
    title: t('about'),
    description: t('about_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'about_en',
          alt: t('about_seo_image_alt'),
        },
      },
    },
  },
  archive: {
    component: Archive,
    title: t('archive'),
    description: t('archive_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'archive_en',
          alt: t('archive_seo_image_alt'),
        },
      },
    },
  },
  'email-reply': {
    component: EmailReply,
    title: t('thank_you_for_your_email'),
    seo: {
      openGraph: {
        image: {
          name: 'contact_me_en',
          alt: t('contact_seo_image_alt'),
        },
      },
      //Do not index this reply-page
      noIndex: true,
    },
    description: t('contact_seo_description'),
  },
};

const pageTitle = englishSlugMap[slug]?.title;
const description = englishSlugMap[slug]?.description;

const PageContent = englishSlugMap[slug]?.component as
  | typeof About
  | typeof Skills;

const imageName = englishSlugMap[slug]?.seo.openGraph.image.name;

const imageAlt = englishSlugMap[slug]?.seo.openGraph.image.alt;

const noIndex = englishSlugMap[slug]?.seo.noIndex;

const restProps = (
  englishSlugMap[slug]
    ? {
        techSkill: englishSlugMap[slug].techSkill,
      }
    : {}
) as { techSkill: TechSkillProps };
---

<PageContent
  title={pageTitle}
  inert={false}
  seo={{
    openGraph: {
      image: {
        name: imageName,
        alt: imageAlt,
      },
    },
    noIndex: noIndex ?? false,
  }}
  description={description}
  {...restProps}
/>
