---
import HomeLayout from '@layouts/Home.astro';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import ModalDialog from '@components/modalDialog/ModalDialog.astro';
import ShareContent from '@components/share/Share.astro';
import ContactContent from '@components/contact/Contact.astro';
import IconContact from '@assets/menuIcons/contact.png';
import IconShare from '@assets/menuIcons/share.png';
import ContactConfirmation from '@components/contact/Confirmation.astro';
import ContactError from '@components/contact/Error.astro';
import type { ModalTypes } from '@i18n/routes';
import type { DanishLanguageSlug } from '@i18n/settings';

type Props = Record<string, never>;

type DanishModalPaths = {
  [K in ModalTypes<'da'>]: { params: { lang: DanishLanguageSlug; modal: K } };
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = <T extends DanishModalPaths>(paths: T): T => paths;
  const paths = createPaths({
    del: { params: { lang: 'da', modal: 'del' } },
    kontakt: { params: { lang: 'da', modal: 'kontakt' } },
    ['besked-modtaget']: {
      params: { lang: 'da', modal: 'besked-modtaget' },
    },
    ['besked-fejl']: { params: { lang: 'da', modal: 'besked-fejl' } },
  });
  return Object.values(paths);
}

const { modal } = Astro.params;

const danishModalMap: Record<
  ModalTypes<'da'>,
  {
    component: AstroComponentFactory;
    modalIcon: ImageMetadata;
    title: string;
    description: string;
    seo: {
      openGraph: {
        image: {
          name: string;
          alt: string;
        };
      };
      noIndex?: true;
    };
  }
> = {
  del: {
    component: ShareContent,
    modalIcon: IconShare,
    title: t('share'),
    description: t('share_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'share_da',
          alt: t('share_seo_image_alt'),
        },
      },
    },
  },
  kontakt: {
    component: ContactContent,
    modalIcon: IconContact,
    title: t('contact_title'),
    description: t('contact_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'contact_me_da',
          alt: t('contact_seo_image_alt'),
        },
      },
    },
  },
  ['besked-modtaget']: {
    component: ContactConfirmation,
    modalIcon: IconContact,
    title: t('thank_you'),
    description: t('contact_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'contact_me_da',
          alt: t('contact_seo_image_alt'),
        },
      },
      //Do not index this confirmation-page
      noIndex: true,
    },
  },
  ['besked-fejl']: {
    component: ContactError,
    modalIcon: IconContact,
    title: t('whoops'),
    description: t('contact_seo_description'),
    seo: {
      openGraph: {
        image: {
          name: 'contact_me_da',
          alt: t('contact_seo_image_alt'),
        },
      },
      //Do not index this error-page
      noIndex: true,
    },
  },
};

const ModalContent: AstroComponentFactory | undefined =
  danishModalMap[modal]?.component;

const iconImage = danishModalMap[modal]?.modalIcon;

const modalTitle = danishModalMap[modal]?.title;

const description = danishModalMap[modal]?.description;

const imageName = danishModalMap[modal]?.seo.openGraph.image.name;

const imageAlt = danishModalMap[modal]?.seo.openGraph.image.alt;

const noIndex = danishModalMap[modal]?.seo.noIndex;

const gradientColor = 'verdigris';

// Throw an error during the static build if the modal is undefined
if (!ModalContent) {
  throw new Error(`Modal type "${modal}" not found.`);
}

// Throw an error during the static build if the icon is undefined
if (!iconImage) {
  throw new Error(`IconImage not found in modal for "${iconImage}".`);
}

// Throw an error during the static build if the title is undefined
if (!modalTitle) {
  throw new Error(`modalTitle not found in modal for "${modalTitle}".`);
}
---

<HomeLayout
  title={t('home')}
  lang={lang}
  inert
  seo={{
    openGraph: {
      image: {
        name: imageName,
        alt: imageAlt,
      },
    },
    ...(noIndex && { noIndex }),
  }}
  description={description}
  ><ModalDialog
    title={modalTitle}
    labels={{ close: t('close_modal_title') }}
    iconImage={iconImage}
    gradientColor={gradientColor}
    ><ModalContent />
  </ModalDialog>
</HomeLayout>
