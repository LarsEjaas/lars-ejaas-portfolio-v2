---
import HomeLayout from '@layouts/Home.astro';
import type { AstroComponentFactory } from 'astro/runtime/server/index.js';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import ModalDialog from '@components/modalDialog/ModalDialog.astro';
import ShareContent from '@components/share/Share.astro';
import ContactContent from '@components/contact/Contact.astro';
import IconContact from '@assets/menuIcons/contact.png';
import IconShare from '@assets/menuIcons/share.png';
import type { ModalTypes } from '@i18n/routes';
import type { DanishLanguageSlug } from '@i18n/settings';

type DanishModalPaths = {
  [K in ModalTypes<'da'>]: { params: { lang: DanishLanguageSlug; modal: K } };
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = <T extends DanishModalPaths>(paths: T): T => paths;
  const paths = createPaths({
    del: { params: { lang: 'da', modal: 'del' } },
    kontakt: { params: { lang: 'da', modal: 'kontakt' } },
  });
  return Object.values(paths);
}

const { modal } = Astro.params;

const danishModalMap: Record<
  ModalTypes<'da'>,
  { component: AstroComponentFactory; icon: ImageMetadata; title: string }
> = {
  del: { component: ShareContent, icon: IconShare, title: t('share') },
  kontakt: {
    component: ContactContent,
    icon: IconContact,
    title: t('contact_title'),
  },
};

const ModalContent: AstroComponentFactory | undefined =
  danishModalMap[modal]?.component;

const iconImage = danishModalMap[modal]?.icon;

const modalTitle = danishModalMap[modal]?.title;

const gradientColor = 'verdigris';

// Throw an error during the static build if the modal is undefined
if (!ModalContent) {
  throw new Error(`Modal type "${modal}" not found.`);
}

// Throw an error during the static build if the icon is undefined
if (!iconImage) {
  throw new Error(`IconImage not found in modal for "${iconImage}".`);
}

// Throw an error during the static build if the title is undefined
if (!modalTitle) {
  throw new Error(`modalTitle not found in modal for "${modalTitle}".`);
}
---

<HomeLayout title={modalTitle} lang={lang} inert
  ><ModalDialog
    title={modalTitle}
    labels={{ close: t('close_modal_title') }}
    iconImage={iconImage}
    gradientColor={gradientColor}
    ><ModalContent />
  </ModalDialog>
</HomeLayout>
