---
import SkillsLayout from '@layouts/Skills.astro';
import type { SlugWithSkillTypes, SkillSlugPath } from '@i18n/routes';
import {
  skillsObject,
  techSkillEntries,
  type TechSkill,
} from '@content/techSkills';
const skillIconImages = import.meta.glob('@assets/skillIcons/*.svg', {
  query: '?raw',
  import: 'default',
});

type Props = Record<string, never>;

type DanishSkillSlugPaths = {
  [P in SlugWithSkillTypes<'da'>]: {
    params: SkillSlugPath<P> & { lang: 'da' };
  };
};

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = (skills: readonly TechSkill[]): DanishSkillSlugPaths => {
    return skills.reduce<DanishSkillSlugPaths>(
      (acc, skill) => ({
        ...acc,
        [`kompetencer/${skill}`]: {
          params: { lang: 'da', slug: 'kompetencer', skill },
        },
      }),
      {} as DanishSkillSlugPaths
    );
  };

  const paths = createPaths(techSkillEntries);
  return Object.values(paths);
}

const { skill } = Astro.params;

const skillData = skillsObject[skill];

const svgPath = Object.entries(skillIconImages).find(([path]) =>
  path.includes(skillData.imageSrc)
);

if (!svgPath) {
  console.error(`Skill image not found for: ${skillData.imageSrc}`);
  return null;
}
const svgContent = (await svgPath[1]()) as string;
const techSkill = { ...skillData, svgContent };

const pageTitle = skillData.title;
---

<SkillsLayout title={pageTitle} inert={false} techSkill={techSkill} />
