---
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import SkillsLayout from '@layouts/Skills.astro';
import type { SlugWithSkillTypes, SkillSlugPath } from '@i18n/routes';
import {
  skillsObject,
  techSkillEntries,
  type TechSkill,
} from '@content/techSkills';
import ModalDialog from '@components/modalDialog/ModalDialog.astro';
import IconContact from '@assets/menuIcons/contact.png';
import IconShare from '@assets/menuIcons/share.png';
import ShareContent from '@components/share/Share.astro';
import ContactContent from '@components/contact/Contact.astro';
const skillIconImages = import.meta.glob('@assets/skillIcons/*.svg', {
  query: '?raw',
  import: 'default',
});

type DanishSkillSlugPaths = {
  [P in SlugWithSkillTypes<'da'>]: {
    params: SkillSlugPath<P> & { lang: 'da'; modal: 'del' | 'kontakt' };
  };
};

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

export function getStaticPaths() {
  // Helper function to create a type-safe path object
  const createPaths = (skills: readonly TechSkill[]): DanishSkillSlugPaths => {
    return skills.reduce<DanishSkillSlugPaths>((acc, skill) => {
      // Create entries for both modal types for each skill
      const kontaktRoute = {
        [`da/kompetencer/${skill}/kontact`]: {
          params: { lang: 'da', slug: 'kompetencer', skill, modal: 'kontakt' },
        },
      };

      const delRoute = {
        [`da/kompetencer/${skill}/del`]: {
          params: { lang: 'da', slug: 'kompetencer', skill, modal: 'del' },
        },
      };

      return {
        ...acc,
        ...kontaktRoute,
        ...delRoute,
      };
    }, {} as DanishSkillSlugPaths);
  };

  const paths = createPaths(techSkillEntries);
  return Object.values(paths);
}

const { skill, modal } = Astro.params;

const skillData = skillsObject[lang][skill];

const svgPath = Object.entries(skillIconImages).find(([path]) =>
  path.includes(skillData.imageSrc)
);

if (!svgPath) {
  console.error(`Skill image not found for: ${skillData.imageSrc}`);
  return null;
}
const svgContent = (await svgPath[1]()) as string;
const techSkill = { ...skillData, svgContent };

const pageTitle = skillData.title;
const modalTitle = modal === 'del' ? t('share') : t('contact');
const modalIcon = modal === 'del' ? IconShare : IconContact;
const ModalContent = modal === 'del' ? ShareContent : ContactContent;
---

<SkillsLayout title={pageTitle} inert={false} techSkill={techSkill}>
  <ModalDialog
    title={modalTitle}
    labels={{ close: t('close_modal_title') }}
    iconImage={modalIcon}
    gradientColor="verdigris"
    ><ModalContent />
  </ModalDialog>
</SkillsLayout>
