import fs from 'fs';
import { appRoutes } from '../i18n/appRoutes.mts';

// Function to generate the routes dictionary
async function generateRoutes() {
  // Import the sitemap serialization function (update path accordingly)

  const routes = Object.entries(appRoutes.da).reduce(
    (acc, [page, alternate]) => {
      acc[page] = {
        url: page,
        alternates: [{ url: `da/${alternate}`, lang: 'da', hreflang: 'da-DK' }],
      };
      acc[`da/${alternate}`] = {
        url: `da/${alternate}`,
        alternates: [{ url: page, hreflang: 'en-US', lang: 'en' }],
      };
      return acc;
    },
    {} as Record<
      string,
      {
        url: string;
        alternates:
          | { url: string; lang: 'da' | 'en'; hreflang: 'da-DK' | 'en-US' }[]
          | null;
      }
    >
  );

  const autogeneratedFileMessage = `/**\n* THIS FILE IS AUTOGENERATED!\n* To make changes please run the 'generateRoutes' script from package.json\n*/\n\n`;

  // Convert to a JavaScript module
  const output =
    autogeneratedFileMessage +
    `export const routes = ${JSON.stringify(routes, null, 2)};`;

  // Write the file to be used in Astro's build
  try {
    fs.writeFileSync('./src/utils/sitemap-routes.mjs', output, 'utf-8');
    console.info(
      '✅ Routes file: src/utils/sitemap-routes.mjs updated successfully!'
    );
  } catch (error) {
    console.error('❌ Failed to write sitemap-routes.mjs:', error);
    process.exit(1); // Exit with an error code if writing fails
  }
}

// Run the function
generateRoutes();
