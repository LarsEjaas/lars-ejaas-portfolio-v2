---
import type { Language } from '@i18n/settings';
import type { BlueskyData } from '@scripts/utils';
import Card from '@components/card/Card.astro';
import PictureWithPlaceholder from '@components/picture/PictureWithPlaceholder.astro';
import type { CamelCaseString, KebabCaseString } from '@customTypes/index';
import IconBluesky from '@assets/someIcons/bluesky.png';
import styles from './bluesky.module.css';
import BlueskyThread from './BlueskyThread.astro';
import { useTranslations } from '@i18n/utils';
import { constructBlueskyThreads } from './utils';
import ProfileTimeline from './ProfileTimeline.astro';
import { capitalize } from '@utils/misc';

const MAX_NUMBER_OF_THREADS = 6;

type Props<T extends string = string, U extends string = string> = {
  lang: Language;
  inert: boolean;
  feed: BlueskyData['threads'];
  profile: BlueskyData['profile'];
  viewTransitionName: KebabCaseString<T>;
  /** Unique identifier for this card. Should be written in camelCase
   * This can also be used as an anchor to go directly to this card.
   */
  id: CamelCaseString<U>;
};

const { lang, inert, feed, profile, viewTransitionName, id } = Astro.props;
const t = useTranslations(lang, 'navigation');

const processedThreads = constructBlueskyThreads(feed).slice(
  0,
  MAX_NUMBER_OF_THREADS
);
const hasMultipleThreads = processedThreads.length > 1;
---

<bluesky-feed-card>
  <Card
    as="aside"
    viewTransitionName={viewTransitionName}
    inert={inert}
    className={styles.card}
  >
    <div class:list={[styles.blueSkyIcon, 'squircle']} data-with-shadow="true">
      <PictureWithPlaceholder
        aria-hidden="true"
        formats={['avif', 'webp']}
        quality="high"
        src={IconBluesky}
        alt=""
        widths={[96, 192, 288]}
        sizes="96px"
        loading="eager"
        decoding="sync"
        classNames={{
          placeholder: styles.butterflyPlaceholder,
        }}
      />
    </div>
    <div class={styles.cardContent}>
      {
        hasMultipleThreads && (
          <a
            class={styles.skipLink}
            href={`#pagination${processedThreads[0]?.recordKey}`}
          >
            {t('skip_to_developer_tips_pagination')}
          </a>
        )
      }
      <div class={styles.butterfly} aria-hidden="true"></div>
      <ProfileTimeline profile={profile} lang={lang} />
      <ul
        id={`feedlist${capitalize(id)}`}
        tabindex={-1}
        class={styles.feedList}
      >
        {
          processedThreads.map((thread, index) => (
            <BlueskyThread
              thread={thread}
              lang={lang}
              displayName={profile.displayName}
              index={index}
            />
          ))
        }
      </ul>
      <div class={styles.navigation}>
        <div
          id={`${id}footerNavigation`}
          role={hasMultipleThreads ? 'menubar' : undefined}
          aria-keyshortcuts="ArrowLeft ArrowRight"
          class={styles.pagination}
        >
          <div
            style={{
              '--slide-length': feed?.length,
            }}
            class={styles.controls}
          >
            {
              hasMultipleThreads &&
                processedThreads.map((thread, index) => (
                  <div class={styles.control}>
                    <a
                      href={`#${thread.recordKey}`}
                      role="menuitem"
                      data-arrow-nav={hasMultipleThreads ? 'true' : undefined}
                      id={
                        index === 0
                          ? `pagination${thread.recordKey}`
                          : undefined
                      }
                      title={`${t('scroll_to_tip')} ${index + 1}`}
                    >
                      <p class="sr-only">{`${t('scroll_to_tip')} ${index + 1}`}</p>
                    </a>
                  </div>
                ))
            }
          </div>
        </div>
        <a
          class={styles.goToAll}
          href={`${lang === 'en' ? '/' : '/da/'}developer-tips/1/`}
        >
          {t('view_all_tips')}
        </a>
      </div>
    </div>
  </Card>
</bluesky-feed-card>

<script>
  import { initHorizontalKeyboardArrowNav } from '@utils/keyboardArrowNavigation';
  class BlueskyFeedCard extends HTMLElement {
    private feedlists: NodeListOf<HTMLUListElement> | null = null;
    private _handleKeydown: (event: KeyboardEvent) => void;
    private _cleanupArrowNav: (() => void) | undefined;

    constructor() {
      super();
      this._handleKeydown = this.handleKeydown.bind(this);
    }

    connectedCallback() {
      const footerImageControl = this.querySelector('[id$="footerNavigation"]');

      if (footerImageControl instanceof HTMLElement) {
        this._cleanupArrowNav =
          initHorizontalKeyboardArrowNav(footerImageControl);
      }

      this.feedlists = this.querySelectorAll('[id^="feedlist"]');
      this.feedlists.forEach((feedlist) => {
        feedlist.addEventListener('keydown', this._handleKeydown);
      });
    }

    disconnectedCallback() {
      if (this.feedlists) {
        this.feedlists.forEach((feedlist) => {
          feedlist.removeEventListener('keydown', this._handleKeydown);
        });
      }
      if (this._cleanupArrowNav) {
        this._cleanupArrowNav();
      }
    }

    private handleKeydown(event: KeyboardEvent) {
      if (
        event instanceof KeyboardEvent &&
        (event.key === 'ArrowLeft' || event.key === 'ArrowRight')
      ) {
        event.stopPropagation();
      }
    }
  }

  customElements.define('bluesky-feed-card', BlueskyFeedCard);
</script>
