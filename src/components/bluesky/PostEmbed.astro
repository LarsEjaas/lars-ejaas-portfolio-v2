---
import PictureWithPlaceholder from '@components/picture/PictureWithPlaceholder.astro';
import imageMeta from '@assets/bluesky/image-meta.json';
import type { ImageModule } from '@customTypes/index';
import { capitalize } from '@utils/misc';
import styles from './postEmbed.module.css';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import GlobeIcon from './GlobeIcon.astro';

const blueskyImages = import.meta.glob('@assets/bluesky/*.{jpg,jpeg,png}');

export type Props = ExternalOrVideoEmbed | ImageEmbed;

interface ExternalOrVideoEmbed {
  embedType: 'external' | 'video';
  id?: never;
  uri?: string;
  title?: string;
  description?: string;
  thumbnail?: string;
  alt?: string;
  className?: string;
}

interface ImageEmbed {
  embedType: 'images';
  id: string;
  uri?: string;
  title?: never;
  description?: never;
  thumbnail?: never;
  alt?: string;
  className?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');

const { embedType, uri, title, description, thumbnail, alt, className, id } =
  Astro.props;

const embedHost = uri ? new URL(uri).hostname : undefined;

const imageName =
  embedType === 'images'
    ? uri && uri in imageMeta
      ? imageMeta[uri as keyof typeof imageMeta].fileName
      : undefined
    : thumbnail && thumbnail in imageMeta
      ? imageMeta[thumbnail as keyof typeof imageMeta].fileName
      : undefined;

if (!imageName || typeof imageName !== 'string') {
  if (embedType === 'images') {
    throw new Error('No image name found for the provided uri in PostEmbed');
  }
  throw new Error(
    'No image name found for the provided thumbnail in PostEmbed'
  );
}

const imageImport = Object.entries(blueskyImages).find(([path]) =>
  path.includes(imageName)
);

if (!imageImport) {
  throw new Error(
    `Bluesky embed image not found for: ${imageMeta[thumbnail as keyof typeof imageMeta]?.localPath}`
  );
}
const ImageComponent = ((await imageImport[1]()) as ImageModule).default;
---

<>
  {
    embedType === 'external' && (
      <a
        href={uri}
        target="_blank"
        rel="noopener noreferrer"
        class={`${styles.postEmbed} ${className || ''}`}
      >
        <div class={styles.embedPreview}>
          {thumbnail && (
            <div
              class={styles.embedWrapper}
              style={{
                aspectRatio: `${ImageComponent.width / ImageComponent.height}`,
              }}
            >
              <PictureWithPlaceholder
                aria-hidden="true"
                formats={['avif', 'webp']}
                quality="high"
                src={ImageComponent}
                aria-hidden="true"
                alt={alt || ''}
                width={ImageComponent.width}
                height={ImageComponent.height}
                widths={[328, 500, 670, 1000, 1340]}
                sizes="(max-width: 480px) 328px, (max-width: 652px) 500px, 670px"
                loading="lazy"
                decoding="async"
                placeholderSettings={{
                  width: 40,
                }}
                classNames={{
                  placeholder: styles.embedPlaceholder,
                }}
              />
            </div>
          )}
          <div class={styles.embedInfo}>
            <h3 class={styles.embedTitle}>{title}</h3>
            <p class={`small-body-text ${styles.embedDesc}`}>{description}</p>
            <div class={styles.embedUrl}>
              <GlobeIcon />
              {embedHost}
            </div>
          </div>
        </div>
      </a>
    )
  }
  {
    embedType === 'images' && (
      <Fragment>
                <script>
          const embedDialogButtons = Array.from(document.querySelectorAll('[id^="embedDialogButton"]'));
          embedDialogButtons.forEach((embedDialogButton) => {
          if (
      embedDialogButton instanceof HTMLButtonElement &&
      !embedDialogButton.dataset.initialized
    ) {
      embedDialogButton.dataset.initialized = 'true';
      embedDialogButton.style.cursor = 'pointer';
      embedDialogButton.tabIndex = 0;
      const dialogId = embedDialogButton.dataset.dialogId;
      const dialog = dialogId ? document.getElementById(dialogId) : null;

      if (dialog instanceof HTMLDialogElement) {
        dialog.addEventListener('click', (event) => {
          const dialogRect = dialog.getBoundingClientRect();
          const isInDialog =
            event.clientX >= dialogRect.left &&
            event.clientX <= dialogRect.right &&
            event.clientY >= dialogRect.top &&
            event.clientY <= dialogRect.bottom;

          if (!isInDialog) {
            dialog.close();
          }
        });
      }

      embedDialogButton.addEventListener('click', () => {
        if (dialog instanceof HTMLDialogElement) {
          dialog.showModal();
        }
      });
    }
  });

  const embedDialogCloseButtons = Array.from(
    document.querySelectorAll('[id^="embedDialogCloseButton"]')
  );

  embedDialogCloseButtons.forEach((embedDialogCloseButton) => {
    if (
      embedDialogCloseButton instanceof HTMLButtonElement &&
      !embedDialogCloseButton.dataset.initialized
    ) {
      embedDialogCloseButton.addEventListener('click', (event) => {
        embedDialogCloseButton.dataset.initialized = 'true';
        const currentTarget = event.currentTarget as HTMLButtonElement;
        const dialogId = currentTarget.dataset.dialogId;
        if (dialogId) {
          const dialog = document.getElementById(dialogId);
          if (dialog instanceof HTMLDialogElement) {
            dialog.close();
          }
        }
      });
    }
  });
        </script>
        <button
          type="button"
          id={`embedDialogButton${capitalize(id)}`}
          class={styles.embedDialogButton}
          data-dialog-id={`dialog${capitalize(id)}`}
          aria-label={t('view_image_in_full_size')}
          tabindex="-1"
          style={{
            aspectRatio: `${ImageComponent.width / ImageComponent.height}`,
          }}
        >
          <PictureWithPlaceholder
            formats={['avif', 'webp']}
            quality="high"
            src={ImageComponent}
            alt={alt || ''}
            width={ImageComponent.width}
            height={ImageComponent.height}
            widths={[328, 500, 670, 1000, 1340]}
            sizes="(max-width: 480px) 328px, (max-width: 652px) 500px, 670px"
            loading="lazy"
            decoding="async"
            placeholderSettings={{
              width: 40,
            }}
            classNames={{
              placeholder: styles.embedPlaceholder,
            }}
          />
        </button>
        <dialog
          id={`dialog${capitalize(id)}`}
          class={styles.imageDialog}
          style={{
            '--dialog-width': `${Math.min(ImageComponent.width, 2000)}px`,
            maxWidth: `min(calc(100vw - 4rem), var(--dialog-width))`,
            maxHeight: `min(calc(100vh - 4rem), ${ImageComponent.height}px)`,
          }}
        >
          <button
            type="button"
            class={styles.closeButton}
            data-dialog-id={`dialog${capitalize(id)}`}
            aria-label={t('close_popover')}
            id={`embedDialogCloseButton${capitalize(id)}`}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              width="24"
              height="24"
              aria-hidden="true"
            >
              <path
                d="M11.9997 10.5865L16.9495 5.63672L18.3637 7.05093L13.4139 12.0007L18.3637 16.9504L16.9495 18.3646L11.9997 13.4149L7.04996 18.3646L5.63574 16.9504L10.5855 12.0007L5.63574 7.05093L7.04996 5.63672L11.9997 10.5865Z"
                fill="currentColor"
              />
            </svg>
          </button>
          <figure>
            <div
              class={styles.imageWrapper}
              style={{
                aspectRatio: `${ImageComponent.width / ImageComponent.height}`,
              }}
            >
              <PictureWithPlaceholder
                formats={['avif', 'webp']}
                quality="high"
                src={ImageComponent}
                alt={alt || ''}
                width={ImageComponent.width}
                height={ImageComponent.height}
                widths={[
                  328,
                  704,
                  960,
                  Math.min(1376, ImageComponent.width),
                  Math.min(2000, ImageComponent.width),
                ]}
                sizes={`(max-width: 480px) 328px, (max-width: 768px) 704px,(max-width: 1024px) 960px, (max-width: 1440px) 1376px, ${Math.min(ImageComponent.width, 2000)}px`}
                loading="lazy"
                decoding="async"
                placeholderSettings={{
                  width: 40,
                }}
                classNames={{
                  placeholder: styles.embedPlaceholder,
                }}
              />
            </div>
            {alt && <figcaption class="body-text">{alt}</figcaption>}
          </figure>
        </dialog>
      </Fragment>
    )
  }
</>
