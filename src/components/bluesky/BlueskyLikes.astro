---
import { getLangFromUrl } from '@i18n/utils';
import styles from './blueskyLikes.module.css';
import LikeProfile from './LikeProfile.astro';
import { type ProcessedBlueskyThread } from './utils';
import { MAXIMUM_NUMBER_OF_LIKE_AVATARS } from './constants';

type Props = {
  thread: ProcessedBlueskyThread;
};

const lang = getLangFromUrl(Astro.url);

const { thread } = Astro.props;

const totalNumberOfLikes = thread.mainPost.engagement.likes;

const atUri = thread.mainPost.id;

const likes = (thread.mainPost.likes || []).slice(
  0,
  MAXIMUM_NUMBER_OF_LIKE_AVATARS
);
---

<div
  is="blusky-likes"
  class={styles.likesWrapper}
  data-uri={atUri}
  id={`threadLikes${atUri.split('/').pop()}`}
>
  {
    likes.length > 0 && (
      <>
        <svg width="20" height="19" viewBox="0 0 20 19" fill="none">
          <path
            d="M4.99182 0.835242C5.87688 0.684441 6.78451 0.734186 7.64779 0.980813C8.51107 1.22744 9.30799 1.66466 9.97982 2.26024L10.0168 2.29324L10.0508 2.26324C10.692 1.70054 11.4458 1.28104 12.262 1.03273C13.0782 0.784412 13.9379 0.712997 14.7838 0.823243L15.0298 0.859243C16.0961 1.04335 17.0928 1.5124 17.9143 2.21671C18.7358 2.92103 19.3515 3.83439 19.6963 4.86008C20.041 5.88577 20.102 6.9856 19.8727 8.04311C19.6434 9.10062 19.1324 10.0764 18.3938 10.8672L18.2138 11.0522L18.1658 11.0932L10.7158 18.4722C10.5439 18.6424 10.3161 18.7445 10.0747 18.7596C9.83328 18.7746 9.59458 18.7017 9.40282 18.5542L9.30882 18.4722L1.81582 11.0502C1.02204 10.2779 0.457522 9.30092 0.184781 8.22751C-0.0879596 7.1541 -0.058277 6.02614 0.270541 4.96856C0.59936 3.91098 1.21448 2.96504 2.04778 2.23551C2.88109 1.50599 3.90005 1.02134 4.99182 0.835242Z"
            fill="currentColor"
          />
        </svg>
        <div class={styles.avatarStack} role="menubar">
          {likes.map((like) => (
            <LikeProfile like={like} lang={lang} />
          ))}
          {totalNumberOfLikes > likes.length && (
            <div
              class={styles.additionalLikes}
            >{`+${Math.abs(totalNumberOfLikes - likes.length)}`}</div>
          )}
        </div>
      </>
    )
  }
</div>

<script>
  import { initHorizontalKeyboardArrowNav } from '@utils/keyboardArrowNavigation';
  import {
    fetchLikesOnce,
    cleanupSkeletonLoaders,
    injectPopoverScript,
    createLikesHTML,
  } from './utils';
  import type { Language } from '../../i18n/utils';

  class BlueskyLikes extends HTMLDivElement {
    private _cleanupArrowNav: (() => void) | undefined;

    connectedCallback() {
      this.updateLikes();
    }

    disconnectedCallback() {
      if (this._cleanupArrowNav) {
        this._cleanupArrowNav();
      }
    }

    private async updateLikes() {
      const lang = document.documentElement.dataset.lang as Language;

      if (!(this instanceof HTMLDivElement)) {
        return;
      }

      const devTipsLikes = await fetchLikesOnce();

      // If the component is disconnected while waiting for likes, do nothing.
      if (!this.isConnected) {
        return;
      }

      const atUri = this.dataset.uri;
      if (!atUri || !devTipsLikes.length) {
        cleanupSkeletonLoaders(this);
        this._cleanupArrowNav = initHorizontalKeyboardArrowNav(this);
        return;
      }

      const likesHTML = createLikesHTML(devTipsLikes, atUri, lang);
      if (likesHTML) {
        this.innerHTML = likesHTML;
        injectPopoverScript(this);
      } else {
        cleanupSkeletonLoaders(this);
      }

      this._cleanupArrowNav = initHorizontalKeyboardArrowNav(this);
    }
  }
  customElements.define('blusky-likes', BlueskyLikes, { extends: 'div' });
</script>
