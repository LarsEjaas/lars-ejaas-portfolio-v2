---
import { getThreadLabels, type ProcessedBlueskyThread } from './utils';
import styles from './timeline.module.css';
import TagIcon from '../workCard/TagIcon.astro';

type Props = {
  thread: ProcessedBlueskyThread;
};

const { thread } = Astro.props;

const labels = getThreadLabels(thread);
const title = thread.mainPost.content.raw.slice(0, 120);
---

<li is="table-of-contents-item" class={styles.tocItem}>
  <a
    href={`#${thread.recordKey}`}
    data-arrow-nav="true"
    data-href={thread.recordKey}
  >
    <span class={styles.tocTitle}>{title}</span>
    {
      labels.length && (
        <div class={styles.labelWrapper} aria-hidden="true">
          {labels.map((label) => (
            <span class={styles.label} data-size="small">
              <TagIcon />
              {label}
            </span>
          ))}
        </div>
      )
    }
  </a>
</li>

<script>
  class TableOfContentsItem extends HTMLLIElement {
    private link: HTMLAnchorElement | null = null;
    private _handleClick: (ev: MouseEvent | KeyboardEvent) => void;

    constructor() {
      super();
      this._handleClick = this.handleClick.bind(this);
    }

    connectedCallback() {
      this.link = this.querySelector('a');
      if (this.link) {
        this.link.addEventListener('click', this._handleClick);
        this.link.addEventListener('keydown', this._handleClick);
      }
    }

    disconnectedCallback() {
      if (this.link) {
        this.link.removeEventListener('click', this._handleClick);
        this.link.removeEventListener('keydown', this._handleClick);
      }
    }

    private handleClick(ev: MouseEvent | KeyboardEvent) {
      if (
        !this.link ||
        !this.link.dataset.href ||
        (ev instanceof KeyboardEvent && ev.key !== 'Enter' && ev.key !== ' ')
      ) {
        return;
      }

      const target = document.querySelector(`#${this.link.dataset.href}`);
      if (target instanceof HTMLDetailsElement && !target.open) {
        target.toggleAttribute('open');
      }
    }
  }
  customElements.define('table-of-contents-item', TableOfContentsItem, {
    extends: 'li',
  });
</script>
