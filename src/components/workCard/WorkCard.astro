---
import styles from './workCard.module.css';
import Card from '@components/card/Card.astro';
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from '@i18n/utils';
import type { SlugWithSkillKeys } from '@i18n/routes';
import ConditionalLink from './ConditionalLink.astro';
import WorkCardImage from './WorkCardImage.astro';
import CurrentEmploymentBadge from './CurrentEmploymentBadge.astro';
import CalendarIcon from './CalendarIcon.astro';
import CodeIcon from './CodeIcon.astro';

type Props = {
  inert: boolean;
  headline?: string;
  subHeadline: string;
  /** Unique identifier for this card. Should be written in camelCase
   * This can also be used as an anchor to go directly to this card.
   */
  id: string;
  date: string;
  headerImage?: ImageMetadata;
  headerImageAlt?: string;
  currentEmployment?: boolean;
  tags?: { title: string; href?: SlugWithSkillKeys }[];
  /**  distinct identifying name used for view transitions. Should be in kebab-case.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/view-transition-name MDN Web Docs}
   */
  viewTransitionName: string;
  footerImages?: {
    src: ImageMetadata;
    alt: string;
    id: string;
  }[];
  animatedHeader?: boolean;
  /** Delay in milliseconds before the animation starts */
  animationDelay?: number;
  href?: string;
  className?: string | undefined;
};

const {
  inert,
  headline,
  subHeadline,
  id,
  date,
  headerImage,
  headerImageAlt,
  currentEmployment,
  tags,
  viewTransitionName,
  animatedHeader,
  animationDelay,
  href,
  footerImages,
  className,
  /** data-attributes, etc. */
  ...rest
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
const t = useTranslations(lang, 'navigation');

if (headerImage && !headerImageAlt) {
  console.warn(
    `<WorkCard> headerImageAlt is missing for ${headerImage.src}. This is required for accessibility.`
  );
}

footerImages?.forEach((footerImage) => {
  if (!footerImage.alt) {
    console.warn(
      `<WorkCard> footerImage.alt is missing for ${footerImage.src.src}. This is required for accessibility.`
    );
  }
});
---

<script>
  import { initializeKeyboardArrowNavigation } from '@utils/keyboardArrowNavigation';
  const tagsWrappers = document.querySelectorAll('[id$="WorkCardTags"]');

  const isHTMLElementList = (
    list: NodeListOf<Element>
  ): list is NodeListOf<HTMLElement> => {
    return Array.from(list).every((item) => item instanceof HTMLElement);
  };

  if (tagsWrappers.length && isHTMLElementList(tagsWrappers)) {
    tagsWrappers.forEach((tagsWrapper) =>
      initializeKeyboardArrowNavigation(tagsWrapper)
    );
  }

  const footerImageControls = document.querySelectorAll(
    '[id$="footerNavigation"]'
  );
  const footerImageControlsArray = Array.from(footerImageControls);
  footerImageControlsArray.forEach((control) => {
    if (control instanceof HTMLElement) {
      initializeKeyboardArrowNavigation(control);
      const buttons = control.querySelectorAll('a');
      const controlButtonsArray = Array.from(buttons);
      controlButtonsArray.forEach((controlButton) => {
        if (controlButton instanceof HTMLElement) {
          controlButton.addEventListener('click', (e) => {
            e.preventDefault();
            const scrollTarget = document.querySelector(
              `#${(e.currentTarget as HTMLAnchorElement).href.split('#')[1]}`
            );
            if (scrollTarget instanceof HTMLElement) {
              scrollTarget.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'start',
              });
            }
          });
        }
      });
    }
  });
</script>
<Card
  inert={inert}
  viewTransitionName={viewTransitionName}
  id={id}
  className={className}
  {...rest}
>
  {currentEmployment && <CurrentEmploymentBadge lang={lang} />}
  <div data-with-image={!!headerImage || undefined} class={styles.header}>
    <div class={styles.headerContent}>
      <ConditionalLink href={href}>
        {
          headerImage && (
            <WorkCardImage
              image={{ src: headerImage, alt: headerImageAlt || '' }}
              pictureAttributes={{
                class: styles.picture,
                'data-animated': animatedHeader || null,
                style: {
                  '--animation-delay': `${animationDelay || 0}ms`,
                },
              }}
            />
          )
        }
      </ConditionalLink>
      {headline && <h2>{headline}</h2>}
    </div>
  </div>
  <div class={styles.cardContent}>
    {subHeadline && <h3 class="stylized-capitalized-text">{subHeadline}</h3>}
    {
      date && (
        <div class={styles.textWithIcon}>
          <CalendarIcon />
          <p class="small-body-text">{date}</p>
        </div>
      )
    }
    <slot />
    {
      tags && (
        <div
          id={`${id}WorkCardTags`}
          class={styles.tagsWrapper}
          role="group"
          aria-keyshortcuts="ArrowLeft ArrowRight"
          aria-describedby={`${id}tagsArrowNavDescription`}
        >
          <div class={styles.textWithIcon}>
            <CodeIcon />
            <p class="small-body-text">{t('tech_stack')}</p>
          </div>
          <span id={`${id}tagsArrowNavDescription`} class="sr-only">
            {t('section_with_arrow_nav')}
          </span>
          <ul class={styles.tags}>
            {tags.map((tag) => (
              <li>
                {tag.href ? (
                  <a
                    data-arrow-nav="true"
                    href={`${translatePath(`${tag.href}/`)}#skillPresentation`}
                    class={styles.tag}
                  >
                    {tag.title}
                  </a>
                ) : (
                  <span class={styles.tag}>{tag.title}</span>
                )}
              </li>
            ))}
          </ul>
        </div>
      )
    }
  </div>
  {
    footerImages && (
      <div class={styles.footerImagesWrapper}>
        <ul tabindex="-1" class={styles.footerImages}>
          {footerImages.map((image) => (
            <li id={image.id}>
              <WorkCardImage
                image={image}
                pictureAttributes={{
                  class: styles.picture,
                  'data-animated': animatedHeader || null,
                }}
              />
            </li>
          ))}
        </ul>
        <div
          id={`${id}footerNavigation`}
          role="group"
          aria-describedby={`${id}ArrowNav`}
        >
          <span
            id={`${id}ArrowNav`}
            aria-keyshortcuts="ArrowLeft ArrowRight"
            class="sr-only"
          >
            {t('section_with_arrow_nav')}
          </span>
          <ul
            style={{
              '--slide-length': footerImages?.length,
            }}
            class={styles.controls}
          >
            {footerImages?.length > 1 &&
              footerImages.map((image, index) => (
                <li class={styles.control}>
                  <a
                    href={`#${image.id}`}
                    data-arrow-nav="true"
                    title={`${t('scroll_to_image')} ${index + 1}`}
                  >
                    <p class="sr-only">
                      {`${t('scroll_to_image')} ${index + 1}`}
                    </p>
                  </a>
                </li>
              ))}
          </ul>
        </div>
      </div>
    )
  }
</Card>
