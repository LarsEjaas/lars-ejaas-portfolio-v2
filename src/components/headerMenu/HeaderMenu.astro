---
import styles from './headerMenu.module.css';
import {
  getLangFromUrl,
  removeTrailingSlash,
  useTranslatedPath,
  useTranslations,
} from '@i18n/utils';
import IconWork from '@assets/menuIcons/work.png';
import IconSkills from '@assets/menuIcons/skillset.png';
import IconAbout from '@assets/menuIcons/about.png';
import IconContact from '@assets/menuIcons/contact.png';
import IconShare from '@assets/menuIcons/share.png';
import LanguageToggle from '@components/languageToggle/LanguageToggle.astro';
import ThemeSwitch from '@components/themeSwitch/ThemeSwitch.astro';
import ejaasLogo from './ejaasLogo.svg';
import { appRoutes } from '@i18n/routes';
import PictureWithPlaceholder from '../picture/PictureWithPlaceholder.astro';
import type { Language } from '@i18n/settings';

type Props = {
  inert: boolean;
  withDarkkModeToggle?: boolean;
  withModalLinks?: boolean;
  translationUrls?: Record<Language, string>;
};
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, 'navigation');
const translatePath = useTranslatedPath(lang);
const {
  inert,
  withDarkkModeToggle = true,
  withModalLinks = true,
  translationUrls,
} = Astro.props;
const shareUrl = `${removeTrailingSlash(Astro.url.pathname)}/${appRoutes[lang].share}/`;
const contactUrl = `${removeTrailingSlash(Astro.url.pathname)}/${appRoutes[lang].contact}/`;
---

<script>
  import { initializeKeyboardArrowNavigation } from '@utils/keyboardArrowNavigation';
  import { storeScrollPositionOnClick } from '@utils/scrollPosition';

  if (window.desktopMenuContainer) {
    initializeKeyboardArrowNavigation(window.desktopMenuContainer);
  }
  if (window.desktopShareLink) {
    storeScrollPositionOnClick(window.desktopShareLink);
  }
  if (window.desktopContactLink) {
    storeScrollPositionOnClick(window.desktopContactLink);
  }
</script>
<header class={styles.header} inert={inert}>
  <div
    id="desktopMenuContainer"
    role="group"
    aria-keyshortcuts="ArrowLeft ArrowRight"
    class={`${styles.desktopMenu} desktop-only`}
  >
    <h2 class="sr-only" id="desktopMenuTitle">
      {t('nav_desktop')}
    </h2>
    <nav
      aria-labelledby="desktopMenuTitle"
      role="menubar"
      aria-label={t('nav_desktop')}
    >
      <a
        data-arrow-nav="true"
        title={t('home')}
        role="menuitem"
        href={translatePath('/')}
        data-current={Astro.url.pathname === translatePath('/') || undefined}
        class={styles.homeLink}
      >
        <p id="lightboxTitle" class="sr-only">{t('home')}</p>
        <div
          class={styles.ejaasLogo}
          style={{
            backgroundImage: `url(${ejaasLogo.src})`,
            width: `${ejaasLogo.width}px`,
            aspectRatio: `${ejaasLogo.width / ejaasLogo.height}`,
          }}
        >
        </div>
      </a>
      <a
        data-arrow-nav="true"
        role="menuitem"
        title={t('work')}
        href={translatePath('/work/')}
        data-current={Astro.url.pathname.startsWith(translatePath('/work/')) ||
          undefined}
        class={styles.workLink}
        ><div class="squircle" data-with-shadow="true">
          {
            /* Render images slightly too large to avoid dublicating for mobile menu */
          }
          <PictureWithPlaceholder
            aria-hidden="true"
            formats={['avif', 'webp']}
            quality="high"
            src={IconWork}
            alt=""
            width="40"
            height="40"
            widths={[48, 96, 144]}
            loading="eager"
            decoding="sync"
            placeholderSettings={{ width: 10, blurSigma: 0.5 }}
            classNames={{ placeholder: styles.placeholder }}
          />
        </div>
        <p>{t('work')}</p>
      </a>
      <a
        data-arrow-nav="true"
        role="menuitem"
        title={t('skills')}
        href={translatePath('/skills/')}
        data-current={Astro.url.pathname === translatePath('/skills/') ||
          undefined}
        class={styles.skillsLink}
        ><div class="squircle" data-with-shadow="true">
          {
            /* Render images slightly too large to avoid dublicating for mobile menu */
          }
          <PictureWithPlaceholder
            aria-hidden="true"
            formats={['avif', 'webp']}
            quality="high"
            src={IconSkills}
            alt=""
            width="40"
            height="40"
            widths={[48, 96, 144]}
            loading="eager"
            decoding="sync"
            placeholderSettings={{ width: 10, blurSigma: 0.5 }}
            classNames={{ placeholder: styles.placeholder }}
          />
        </div><p>{t('skills')}</p></a
      >
      <a
        data-arrow-nav="true"
        role="menuitem"
        title={t('about')}
        href={translatePath('/about/')}
        data-current={Astro.url.pathname.startsWith(translatePath('/about/')) ||
          undefined}
        class={styles.aboutLink}
        ><div class="squircle" data-with-shadow="true">
          {
            /* Render images slightly too large to avoid dublicating for mobile menu */
          }
          <PictureWithPlaceholder
            aria-hidden="true"
            formats={['avif', 'webp']}
            quality="high"
            src={IconAbout}
            alt=""
            width="48"
            height="48"
            widths={[48, 96, 144]}
            loading="eager"
            decoding="sync"
            placeholderSettings={{ width: 10, blurSigma: 0.5 }}
            classNames={{ placeholder: styles.placeholder }}
          />
        </div><p>{t('about')}</p></a
      >
      {
        withModalLinks && (
          <div class={styles.navSection}>
            <a
              data-arrow-nav="true"
              role="menuitem"
              href={inert ? undefined : contactUrl}
              aria-disabled={inert ? true : undefined}
              title={t('contact')}
              aria-label={t('contact')}
              id="desktopContactLink"
            >
              <div class="squircle" data-with-shadow="true">
                {/* Render images slightly too large to avoid dublicating for mobile menu */}
                <PictureWithPlaceholder
                  aria-hidden="true"
                  formats={['avif', 'webp']}
                  quality="high"
                  src={IconContact}
                  alt=""
                  width="48"
                  height="48"
                  widths={[48, 96, 144]}
                  loading="eager"
                  decoding="sync"
                  placeholderSettings={{ width: 10, blurSigma: 0.5 }}
                  classNames={{ placeholder: styles.placeholder }}
                />
              </div>
            </a>
            <a
              data-arrow-nav="true"
              role="menuitem"
              href={inert ? undefined : shareUrl}
              aria-disabled={inert ? true : undefined}
              title={t('share')}
              aria-label={t('share')}
              id="desktopShareLink"
            >
              <div class="squircle" data-with-shadow="true">
                {/* Render images slightly too large to avoid dublicating for mobile menu */}
                <PictureWithPlaceholder
                  aria-hidden="true"
                  formats={['avif', 'webp']}
                  quality="high"
                  src={IconShare}
                  alt=""
                  width="48"
                  height="48"
                  widths={[48, 96, 144]}
                  loading="eager"
                  decoding="sync"
                  placeholderSettings={{ width: 10, blurSigma: 0.5 }}
                  classNames={{ placeholder: styles.placeholder }}
                />
              </div>
            </a>
          </div>
        )
      }
    </nav>
    <div class={styles.actions}>
      <div class={styles.divider}></div>
      <LanguageToggle translationUrls={translationUrls} />
      {withDarkkModeToggle && <ThemeSwitch withGlow={false} isMobile={false} />}
    </div>
  </div>
  <div class={`${styles.mobileActions} mobile-only`}>
    <LanguageToggle withBackground={true} translationUrls={translationUrls} />
    {withDarkkModeToggle && <ThemeSwitch withGlow={true} isMobile={true} />}
  </div>
</header>
