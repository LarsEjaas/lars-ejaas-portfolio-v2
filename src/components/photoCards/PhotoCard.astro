---
import styles from './photoCard.module.css';
import { aboutImagesInfo } from '@content/aboutImages/aboutImages.mts';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import { useTranslatedPath } from '@i18n/utils';
import PictureWithPlaceholder from '../picture/PictureWithPlaceholder.astro';

type Props = {
  ImageComponent: ImageMetadata & { placeholder?: string };
  imageName: string;
  index: number;
  includeViewTransitionId: boolean;
  /** Can be used to rotate all the images in the opposite direction */
  reverseRotation?: boolean;
  disabled?: boolean;
  /** Manually pass a viewTransitionId. If not provided, one will be generated from the imageInfo.id. */
  viewTransitionId?: string;
};

const CARD_ROTATIONS = [-4, 6, -2, 3, -5, 2, -4, 3, -4, 2, -5, 4, -3, 2, -4, 5];

const language = getLangFromUrl(Astro.url);

const {
  ImageComponent,
  imageName,
  reverseRotation,
  index,
  includeViewTransitionId,
  viewTransitionId,
  disabled,
} = Astro.props;

const imageInfo = aboutImagesInfo.find((info) => info.imageName === imageName);

if (!imageInfo) {
  throw new Error(`No aboutImagesInfo found for the name: ${imageName}`);
}

const imageAlt =
  imageInfo[`imageAlt${language.toUpperCase()}` as keyof typeof imageInfo];
const englishUrl = `/about/${imageInfo.hrefEN}/` as const;
const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
const t = useTranslations(lang, 'navigation');
---

<a
  href={translatePath(englishUrl)}
  id={includeViewTransitionId ? imageInfo.id : undefined}
  class={styles.anchor}
  tabindex={disabled ? -1 : undefined}
  data-disabled={disabled || undefined}
  data-reverse-rotate={reverseRotation || undefined}
  style={`--index: ${index}; --rotation: ${CARD_ROTATIONS[index]}deg;`}
>
  <p class="sr-only">
    {`${t('go_to_image')}: ${imageInfo[lang === 'en' ? 'titleEN' : 'titleDA']}`}
  </p>
  <div
    class={styles.photocard}
    style={includeViewTransitionId
      ? `view-transition-name: ${viewTransitionId || imageInfo.id};`
      : undefined}
  >
    <PictureWithPlaceholder
      formats={['avif', 'webp']}
      quality="high"
      aria-disabled={disabled || undefined}
      src={ImageComponent}
      alt={imageAlt}
      width={ImageComponent.width}
      height={ImageComponent.height}
      widths={[260, 320, 440, 520]}
      sizes="(max-width: 480px) 260px, (max-width: 768px) 320px, (max-width: 1024px) 440px, 520px"
      loading="lazy"
      decoding="async"
      pictureAttributes={{
        style: {
          aspectRatio: `${ImageComponent.width / ImageComponent.height}`,
        },
      }}
      classNames={{ placeholder: styles.placeholder }}
    />
  </div>
</a>
