---
import type { ImageModule } from '@customTypes/index';
import styles from './photoCard.module.css';
import { Picture } from 'astro:assets';
import { aboutImagesInfo } from '@content/aboutImages/aboutImages';
import { getLangFromUrl } from '@i18n/utils';
import { useTranslatedPath } from '@i18n/utils';

const CARD_ROTATIONS = [-4, 6, -2, 3, -5, 2, -4, 3, -4, 2, -5, 4, -3, 2, -4, 5];

type Props = {
  imageGlob: Record<string, () => Promise<unknown>>;
  imageName: string;
  index: number;
  includeViewTransitionId: boolean;
  /** Can be used to rotate all the images in the opposite direction */
  reverseRotation?: boolean;
};

const language = getLangFromUrl(Astro.url);

const {
  imageGlob,
  imageName,
  reverseRotation,
  index,
  includeViewTransitionId,
} = Astro.props;

const imageInfo = aboutImagesInfo.find((info) => info.imageName === imageName);

if (!imageInfo) {
  throw new Error(`No aboutImagesInfo found for the name: ${imageName}`);
}

const imageImport = Object.entries(imageGlob).find(([path]) =>
  path.includes(imageInfo?.imageName)
);

if (!imageImport) {
  console.error(`aboutImages not found for: ${imageInfo?.imageName}`);
  return null;
}

const ImageComponent = ((await imageImport[1]()) as ImageModule).default;

const imageAlt = imageInfo[`imageAlt${language.toUpperCase()}`];
const englishUrl = `about/${imageInfo.hrefEN}`;
const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<a
  href={translatePath(englishUrl)}
  id={includeViewTransitionId ? imageInfo.id : undefined}
  data-reverse-rotate={reverseRotation || undefined}
  style={`--index: ${index}; --rotation: ${CARD_ROTATIONS[index]}deg;`}
>
  <div
    class={styles.photocard}
    style={includeViewTransitionId
      ? `view-transition-name: ${imageInfo.id};`
      : undefined}
  >
    <Picture
      formats={['avif', 'webp']}
      quality="high"
      src={ImageComponent}
      alt={imageAlt}
      widths={[260, 320, 440, 520]}
      sizes="(max-width: 480px) 260px, (max-width: 768px) 320px, (max-width: 1024px) 440px, 520px"
      loading="eager"
      decoding="sync"
      pictureAttributes={{
        style: `aspect-ratio: ${ImageComponent.width}/${ImageComponent.height};`,
      }}
    />
  </div>
</a>
