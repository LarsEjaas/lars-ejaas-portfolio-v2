---
import { getPublicFiles } from '@utils/publicFileValidator';
import styles from './video.module.css';

type Props = FileSrc & {
  // Boolean attributes
  autoplay?: boolean;
  controls?: boolean;
  loop?: boolean;
  muted?: boolean;
  playsinline?: boolean;
  disablepictureinpicture?: boolean;
  /** A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). */
  disableRemotePlayback?: boolean;

  // Enum-constrained attributes
  preload?: 'none' | 'metadata' | 'auto' | '';
  crossorigin?: 'anonymous' | 'use-credentials';
  controlslist?: ControlsList | ControlsList[];

  // Dimension attributes (CSS pixels - absolute values only, no percentages per spec)
  width?: number;
  height?: number;

  // Media-specific attributes
  /** Cover image to be shown while the video is downloading. If this attribute isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame.
   *
   * Only specify the image filename without the file-extension.
   *
   * File is automatically resolved from public/videos/ folder.
   */
  poster?: string;

  // Safari-specific fallback
  /** A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). Only available in Safari. */
  'x-webkit-airplay'?: 'allow' | 'deny';

  // Styling
  className?: string;
  style?: string | Record<string, string | number>;

  // Accessibility
  'aria-label'?: string;
  'aria-describedby'?: string;
  title?: string;

  // Event handlers (optional)
  onLoadStart?: string;
  onCanPlay?: string;
  onEnded?: string;
  onError?: string;
  /** filename of *.vtt file in public/videos/ folder */
  subtitles?: string;
  /** Show captions on play */
  showCaptionsOnPlay?: boolean;
};

type FileSrc =
  | {
      /**
       * Video file name (without extension) or array of video sources.
       * Files are automatically resolved from public/videos/ folder.
       * @example "my-video" → resolves to /videos/my-video.mp4
       * @example [{ src: "my-video", type: "webm" }, { src: "my-video", type: "mp4" }]
       */
      src: string;

      // Video format types with proper MIME validation
      type: VideoType;
    }
  | {
      /**
       * Video file name (without extension) or array of video sources.
       * Files are automatically resolved from public/videos/ folder.
       * @example "my-video" → resolves to /videos/my-video.mp4
       * @example [{ src: "my-video", type: "webm" }, { src: "my-video", type: "mp4" }]
       */
      src: VideoSource[];
      type?: never;
    };

type VideoType = 'mp4' | 'webm' | 'ogg' | 'mov' | 'avi';

type VideoSource = { src: string; type: VideoType };

// Controls list options
type ControlsList = 'nodownload' | 'nofullscreen' | 'noremoteplayback';

const {
  src,
  type = 'mp4',
  autoplay = false,
  controls = true,
  loop = false,
  muted = false,
  playsinline = false,
  disablepictureinpicture = false,
  disableRemotePlayback = false,
  preload = 'metadata',
  crossorigin,
  controlslist,
  width,
  height,
  poster,
  'x-webkit-airplay': webkitAirplay,
  className,
  style,
  'aria-label': ariaLabel,
  'aria-describedby': ariaDescribedby,
  title,
  onLoadStart,
  onCanPlay,
  onEnded,
  onError,
  subtitles,
  showCaptionsOnPlay = false,
} = Astro.props;

// Helper function to format controlslist
const getControlsList = (
  controlslist: Props['controlslist']
): string | undefined => {
  if (!controlslist) return undefined;
  if (Array.isArray(controlslist)) return controlslist.join(' ');
  return controlslist;
};

// Helper function to normalize style prop
const getStyleString = (style: Props['style']): string | undefined => {
  if (typeof style === 'string') return style;
  if (typeof style === 'object' && style !== null) {
    return Object.entries(style)
      .map(
        ([key, value]) =>
          `${key.replace(/([A-Z])/g, '-$1').toLowerCase()}: ${value}`
      )
      .join('; ');
  }
  return undefined;
};

// Normalize sources - handle case where src might be undefined
const sources = src ? (Array.isArray(src) ? src : [{ src, type }]) : [];

const videos = getPublicFiles('videos');

if (!sources.length) {
  throw new Error(
    `No sources found for the video: ${sources?.[0]?.src}.${sources?.[0]?.type}`
  );
}

// Get the correct video file paths
const videoSources = sources.map((source) => {
  const video_src = `/${
    videos && source
      ? Object.values(videos).find(
          (filePath) =>
            filePath.includes(source.src) &&
            filePath.endsWith(`.${source.type}`)
        )
      : undefined
  }`;

  if (!video_src) {
    console.warn(`Video file not found: ${source.src}.${source.type}`);
  }

  return {
    src: video_src,
    type: source.type,
  };
});

// Get the correct subtitle file path
const subtitle_src = `/${
  subtitles
    ? Object.values(videos).find(
        (filePath) => filePath.includes(subtitles) && filePath.endsWith('.vtt')
      )
    : undefined
}`;

if (subtitles && !subtitle_src) {
  console.warn(
    `Subtitles file: ${subtitles}.vtt not found for the video: ${sources?.[0]?.src}.${sources?.[0]?.type}`
  );
}

const poster_src = `/${
  poster
    ? Object.values(videos).find(
        (filePath) =>
          filePath.includes(poster) &&
          ['jpg', 'jpeg', 'png', 'tiff', 'webp', 'gif', 'avif'].some((ext) =>
            filePath.toLowerCase().endsWith('.' + ext)
          )
      )
    : undefined
}`;
---

<video
  class={`${styles.video} ${className || ''}`}
  autoplay={autoplay}
  controls={controls}
  loop={loop}
  muted={muted}
  playsinline={playsinline}
  disablepictureinpicture={disablepictureinpicture}
  disableRemotePlayback={disableRemotePlayback}
  preload={preload}
  crossorigin={crossorigin}
  controlslist={getControlsList(controlslist)}
  width={width}
  height={height}
  poster={poster_src}
  x-webkit-airplay={webkitAirplay}
  style={getStyleString(style)}
  aria-label={ariaLabel}
  aria-describedby={ariaDescribedby}
  title={title}
  onloadstart={onLoadStart}
  oncanplay={onCanPlay}
  onended={onEnded}
  onerror={onError}
>
  {
    videoSources.map(({ src: sourceSrc, type: sourceType }) => (
      <source src={sourceSrc} type={`video/${sourceType}`} />
    ))
  }
  {
    subtitle_src && (
      <track
        default={showCaptionsOnPlay}
        src={subtitle_src}
        kind="subtitles"
        srclang="en"
      />
    )
  }
</video>
