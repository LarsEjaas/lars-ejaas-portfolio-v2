---
import styles from './lightbox.module.css';
import type { ImageDetails } from '@content/aboutImages/aboutImages.mts';
import { aboutImagesInfo } from '@content/aboutImages/aboutImages.mts';
import { getLangFromUrl } from '@i18n/utils';
import { useTranslatedPath } from '@i18n/utils';
import PhotoCard from '@components/photoCards/PhotoCard.astro';
import type { ImageModule } from '@customTypes/index';
import PictureWithPlaceholder from '../picture/PictureWithPlaceholder.astro';
const aboutImageGlob = import.meta.glob('@assets/aboutImages/*.{jpg,png}');
const IS_DEV = import.meta.env.DEV || false;

type Props = {
  labels: { title: string; close: string; previous: string; next: string };
  image: ImageMetadata;
  imageInfo: ImageDetails;
};

const { labels, image, imageInfo } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const imageAlt = imageInfo[`imageAlt${lang?.toUpperCase()}`];

const URLArray = Object.values(aboutImagesInfo).map(
  (imgInfo) => imgInfo[`href${lang?.toUpperCase()}`]
);

const currentIndex = URLArray.indexOf(
  imageInfo[`href${lang?.toUpperCase()}`] as (typeof URLArray)[number]
);
const translatePath = useTranslatedPath(lang);
const aboutTranslatedPath = translatePath('/about/');
const previousUrl = `${aboutTranslatedPath}${URLArray[currentIndex - 1]}/`;
const isFirst = currentIndex === 0;
const isLast = currentIndex === URLArray.length - 1;
const nextUrl = `${aboutTranslatedPath}${URLArray[currentIndex + 1]}/`;
const imageDescription = imageInfo[`imageDescription${lang?.toUpperCase()}`];

if (!imageDescription && IS_DEV) {
  console.error(`⚠️ Image description not found for ${imageInfo.imageName}`);
}
---

<script is:inline>
  window.addEventListener('pagereveal', async (e) => {
    const transitionType = sessionStorage['transition-type'] || 'fade';
    if (!transitionType || !e.viewTransition) {
      return;
    }
    e.viewTransition.types.add(transitionType);
    sessionStorage.removeItem('transition-type');
    const figure = window.lightbox.querySelector('figure');

    if (figure && transitionType === 'keep-in-place') {
      const originalName = figure.style.viewTransitionName;
      figure.style.viewTransitionName = 'figure';
      await e.viewTransition.finished;
      figure.style.viewTransitionName = originalName;
    }
  });
</script>
<script>
  import { setLightboxTransitionType } from './setTransitionType';

  /** Scroll to the current photo in the thumbnail grid. */
  if (window.thumbnailGridContainer) {
    const currentPhotoCard = window.thumbnailGridContainer.querySelector(
      `a[href="${window.location.pathname}"]`
    );
    if (currentPhotoCard) {
      currentPhotoCard.scrollIntoView({ behavior: 'instant' });
    }
  }
  const handleKeydown = (event: KeyboardEvent) => {
    if (event.key?.toLowerCase() === 'escape') {
      // Do the change asynchronously at the back of the event queue to make sure the change is ALWAYS applied.
      setTimeout(() => {
        window.location.href = '../';
      }, 0);
    }
  };

  if (window.lightbox) {
    window.addEventListener('keydown', handleKeydown, { passive: true });
  }
  setLightboxTransitionType();
</script>
<a class={styles.backdrop} aria-hidden tabindex="-1" href="../"></a>
<!-- remove tabindex in Firefox -->
<dialog
  tabindex="-1"
  id="lightbox"
  role="dialog"
  aria-modal="true"
  open={true}
  aria-labelledby="lightboxTitle"
  class={styles.dialog}
>
  <div class={styles.header}>
    <h2 id="lightboxTitle" class="sr-only">{labels.title}</h2>
    <a
      class={styles.closeLink}
      href="../"
      title={labels.close}
      aria-label={labels.close}
      ><svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 16 16"
        aria-hidden="true"
      >
        <path
          d="M11.0327 8L15.5814 3.45136C16.1395 2.89318 16.1395 1.98818 15.5814 1.42955L14.5705 0.418636C14.0123 -0.139545 13.1073 -0.139545 12.5486 0.418636L8 4.96727L3.45136 0.418636C2.89318 -0.139545 1.98818 -0.139545 1.42955 0.418636L0.418636 1.42955C-0.139545 1.98773 -0.139545 2.89273 0.418636 3.45136L4.96727 8L0.418636 12.5486C-0.139545 13.1068 -0.139545 14.0118 0.418636 14.5705L1.42955 15.5814C1.98773 16.1395 2.89318 16.1395 3.45136 15.5814L8 11.0327L12.5486 15.5814C13.1068 16.1395 14.0123 16.1395 14.5705 15.5814L15.5814 14.5705C16.1395 14.0123 16.1395 13.1073 15.5814 12.5486L11.0327 8Z"
          fill="currentColor"></path>
      </svg></a
    >
  </div>
  <div class={styles.content}>
    <figure
      style={{
        'view-transition-name': imageInfo.id,
        '--width': `${image.width}px`,
        '--height': `${image.height}px`,
        '--aspect-ratio': `${image.width}/${image.height}`,
      }}
      data-portrait={image.height > image.width || undefined}
      data-landscape={image.width > image.height || undefined}
    >
      <PictureWithPlaceholder
        formats={['avif', 'webp']}
        quality="high"
        src={image}
        alt={imageAlt}
        widths={[
          320,
          480,
          640,
          Math.min(image.width, 640),
          Math.min(image.width, 960),
          Math.min(image.width, 1280),
        ]}
        sizes="(max-width: 560px) 320px, (max-width: 820px) 480px, 640px"
        loading="eager"
        decoding="sync"
        pictureAttributes={{
          style: {
            'aspect-ratio': `${image.width}/${image.height}`,
          },
        }}
        classNames={{ placeholder: styles.placeholder }}
        placeholderSettings={{
          style: {
            'aspect-ratio': `${image.width}/${image.height}`,
          },
          width: null,
          height: 24,
        }}
      />
      {imageDescription && <figcaption>{imageDescription}</figcaption>}
    </figure>
    <ul class={styles.controls}>
      <li>
        <a
          data-disabled={isFirst || undefined}
          href={isFirst ? undefined : previousUrl}
          aria-label={labels.previous}
        >
          <svg
            width="16"
            fill="currentColor"
            aria-hidden="true"
            viewBox="4.5 7 15 15"
            style="margin-right:2px;"
          >
            <path d="m16 19-4.6-4.6 4.6-4.6-1.4-1.4-6 6 6 6z"></path>
          </svg>
        </a>
      </li>
      <li>
        <a
          data-disabled={isLast || undefined}
          href={isLast ? undefined : nextUrl}
          aria-label={labels.next}
        >
          <svg
            width="16"
            fill="currentColor"
            aria-hidden="true"
            viewBox="4.5 7 15 15"
          >
            <path d="m8.3 9.9 4.6 4.6-4.6 4.6 1.4 1.4 6-6-6-6z"></path>
          </svg>
        </a>
      </li>
    </ul>
  </div>
  <div class={styles.footer}>
    <div
      class={styles.thumbnailGridContainer}
      style={`--img-count: ${aboutImagesInfo.length - 1};`}
      tabindex="-1"
      id="thumbnailGridContainer"
    >
      {
        aboutImagesInfo.map(async (imgInfo, index) => {
          const imageImport = Object.entries(aboutImageGlob).find(([path]) =>
            path.includes(imgInfo?.imageName)
          );

          if (!imageImport) {
            throw new Error(
              `aboutImages not found for: ${imageInfo?.imageName}`
            );
          }

          const ImageComponent = ((await imageImport[1]()) as ImageModule)
            .default;

          return (
            <PhotoCard
              ImageComponent={ImageComponent}
              imageName={imgInfo.imageName}
              reverseRotation={false}
              disabled={imgInfo.id === imageInfo.id || undefined}
              index={index}
              includeViewTransitionId={false}
            />
          );
        })
      }
    </div>
  </div>
</dialog>
