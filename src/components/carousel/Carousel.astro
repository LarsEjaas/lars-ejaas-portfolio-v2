---
import './carousel.css';
import { Picture } from 'astro:assets';
const newsImages = import.meta.glob('@assets/newsImages/*.{jpg,png}');

type ImageModule = {
  default: string;
};

type ImageExtension = 'jpg' | 'png';

type Year = 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28;

type Month =
  | 'January'
  | 'February'
  | 'March'
  | 'April'
  | 'May'
  | 'June'
  | 'July'
  | 'August'
  | 'September'
  | 'October'
  | 'November'
  | 'December';

type DanishMonth =
  | 'januar'
  | 'februar'
  | 'marts'
  | 'april'
  | 'maj'
  | 'juni'
  | 'juli'
  | 'august'
  | 'september'
  | 'oktober'
  | 'november'
  | 'december';

type DayOfMonth =
  | '1st'
  | '2nd'
  | '3rd'
  | '4th'
  | '5th'
  | '6th'
  | '7th'
  | '8th'
  | '9th'
  | '10th'
  | '11th'
  | '12th'
  | '13th'
  | '14th'
  | '15th'
  | '16th'
  | '17th'
  | '18th'
  | '19th'
  | '20th'
  | '21st'
  | '22nd'
  | '23rd'
  | '24th'
  | '25th'
  | '26th'
  | '27th'
  | '28th'
  | '29th'
  | '30th'
  | '31st';

type ImageType = `${string}.${ImageExtension}`;

type Date = `${Month} ${DayOfMonth}, 20${Year}`;

type DanishDate = `${
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23
  | 24
  | 25
  | 26
  | 27
  | 28
  | 29
  | 30
  | 31}. ${DanishMonth} 20${Year}`;

export type CardInfo = {
  title: string;
  description: string;
  date: Date | DanishDate;
  imageSrc: ImageType;
  imageAlt: string;
  href: string;
  outline: '1' | '2' | '3' | '4' | 'gold';
};

interface Props {
  labels: {
    title: string;
    /** Title of the archive card */
    archiveTitle: string;
    previous: string;
    next: string;
  };
  items: CardInfo[];
  /*Set a limit on items - this way an archive card will be rendered pointing to older news  */
  maxNumberOfItems?: number;
  inert: boolean;
}

const { items, maxNumberOfItems, labels, inert } = Astro.props;

const CAROUSEL_ID = 'carousel' as const;
const HEADING_ID = 'carousel_heading' as const;
const ARCHIVE_ID = 'news-archive';
const ARCHIVE_HREF = 'news-archive';

const itemList =
  maxNumberOfItems && items.length > maxNumberOfItems
    ? items.slice(0, maxNumberOfItems)
    : items;

// const showArchiveCard = maxNumberOfItems && items.length > maxNumberOfItems;
const showArchiveCard = true;
---

<section
  aria-labelledby="carouselheading"
  id={CAROUSEL_ID}
  style={`--card-length: ${showArchiveCard ? itemList.length + 1 : itemList.length}`}
  inert={inert}
>
  <script>
    const { carouselList, previous, next } = window;

    /**
     * Scrolls the demo element to the left or right based on the id of the clicked button.
     */
    const handleScroll = (event: MouseEvent) => {
      const carouselCardWidth = carouselList?.querySelector('li')?.offsetWidth;

      if (
        carouselList &&
        carouselCardWidth &&
        event.currentTarget instanceof HTMLButtonElement
      ) {
        const direction = event.currentTarget?.id;
        carouselList?.scrollBy({
          left: direction === 'next' ? carouselCardWidth : -carouselCardWidth,
          behavior: 'smooth',
        });
      }
    };

    previous?.addEventListener('click', handleScroll, {
      passive: true,
    });
    next?.addEventListener('click', handleScroll, {
      passive: true,
    });

    /**
     * Updates the cursor position in the carousel wrapper element.
     */
    const updateCursor = (event: PointerEvent) => {
      if (carouselList) {
        carouselList.style.setProperty('--x', `${event.layerX}`);
        carouselList.style.setProperty('--y', `${event.layerY}`);
      }
    };

    carouselList?.addEventListener('pointermove', updateCursor, {
      passive: true,
    });
  </script>
  <h2 id={HEADING_ID}>{labels.title}</h2>
  <ul id="carouselList">
    {
      showArchiveCard && (
        <li style={`--index: ${0}`}>
          <a id={ARCHIVE_ID} href={`#${ARCHIVE_HREF}`}>
            <article class={ARCHIVE_ID}>
              <h3>{labels.archiveTitle}</h3>
            </article>
          </a>
        </li>
      )
    }
    {
      itemList.map(async (item, index) => {
        const imageName = item.imageSrc;
        const imageImport = Object.entries(newsImages).find(([path]) =>
          path.includes(imageName)
        );

        if (!imageImport) {
          console.error(`News image not found for: ${imageName}`);
          return null;
        }
        const ImageComponent = ((await imageImport[1]()) as ImageModule)
          .default;

        return (
          <li style={`--index: ${index + 1}`}>
            <a id={`card${index}`} href={`#${item.href}`}>
              <article class={`outline${item.outline}`}>
                <Picture
                  formats={['avif']}
                  quality="high"
                  src={ImageComponent}
                  alt={item.imageAlt}
                  width="232"
                  height="148"
                  densities={[1, 2, 3, 4]}
                  loading="lazy"
                  decoding="async"
                />
                <div class="news-content">
                  <div>
                    <h3>{item.title}</h3>
                    <p>{item.description}</p>
                  </div>
                  <div class="date">
                    <p>{item.date}</p>
                  </div>
                </div>
              </article>
            </a>
          </li>
        );
      })
    }
  </ul>
  <ul class="controls">
    <li>
      <button id="previous" aria-label={labels.previous}>
        <svg width="12" fill="currentColor" aria-hidden viewBox="4.5 7 15 15">
          <path d="m16 19-4.6-4.6 4.6-4.6-1.4-1.4-6 6 6 6z"></path>
        </svg>
      </button>
    </li>
    <li class="indicators" aria-hidden="true">
      {itemList.map((_item, index) => <div style={`--index: ${index + 1}`} />)}
    </li>
    <hr />
    <li>
      <button id="next" aria-label={labels.next}>
        <svg width="12" fill="currentColor" aria-hidden viewBox="4.5 7 15 15">
          <path d="m8.3 9.9 4.6 4.6-4.6 4.6 1.4 1.4 6-6-6-6z"></path>
        </svg>
      </button>
    </li>
  </ul>
</section>
