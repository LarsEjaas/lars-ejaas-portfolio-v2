---
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from '@i18n/utils';
import styles from './skillCardPagination.module.css';
import { techSkills } from '@content/techSkills';
import type { SkillInfo } from '@customTypes/skillTypes';
import { notEmpty } from '@customTypes/index';

type Props = {
  title: string | undefined;
};

const PAGINATION_LENGTH = 5;

function getPaginationItems(array: SkillInfo[], currentIndex: number) {
  // Add an extra hidden botton before and after to help view-transition animation
  const dotsLength = PAGINATION_LENGTH + 2;
  const totalItems = array.length;
  const halfItems = Math.floor(dotsLength / 2);
  const result = [];

  // Calculate how many items we need before and after
  const itemsBefore = halfItems;
  const itemsAfter = dotsLength - halfItems - 1;

  // Add items before current
  for (let i = itemsBefore; i > 0; i--) {
    let index = currentIndex - i;
    // If index is negative, wrap around to end of array
    if (index < 0) index = totalItems + index;
    result.push(array[index]);
  }

  // Add current item
  result.push(array[currentIndex]);

  // Add items after current
  for (let i = 1; i <= itemsAfter; i++) {
    let index = (currentIndex + i) % totalItems;
    result.push(array[index]);
  }

  return result;
}

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
const t_skills = useTranslations(lang, 'skills');

const { title } = Astro.props;

const currentSkill =
  techSkills.find((skill) => skill.title === title) ||
  (techSkills[0] as SkillInfo);

const currentSkillIndex = techSkills.indexOf(currentSkill);

const paginationItems = getPaginationItems(
  techSkills,
  currentSkillIndex
).filter(notEmpty);

const skillIndex = paginationItems.indexOf(currentSkill);
---

<script>
  import { initializeKeyboardArrowNavigation } from '@utils/keyboardArrowNavigation';

  if (window.skillPagination) {
    initializeKeyboardArrowNavigation(window.skillPagination);
  }

  const refererIsWork =
    document.referrer.startsWith(window.location.origin) &&
    (document.referrer.includes('work') ||
      document.referrer.includes('arbejde'));

  // If the user is coming from the work page, show the back button
  if (window.skillBackButton && refererIsWork) {
    window.skillBackButton.dataset.active = 'true';
    window.skillBackButton.addEventListener('click', () => {
      window.history.back();
    });
  }
</script>
<div class={styles.paginationWrapper}>
  <button class={styles.backButton} id="skillBackButton">
    <svg width="7" viewBox="0 0 10 17" aria-hidden="true" fill="none">
      <path
        d="M8.66675 15.333L2.00008 8.66634L8.66675 1.99967"
        stroke="currentColor"
        stroke-width="2.5"
        stroke-linecap="round"></path>
    </svg>
    <span class="body-text">
      {t_skills('go_back')}
    </span>
  </button>
  <ul
    style={{
      '--slide-length': PAGINATION_LENGTH + 2,
      'aspect-ratio': `${PAGINATION_LENGTH + 3} / 1`,
    }}
    class={styles.controls}
    id="skillPagination"
  >
    {
      paginationItems.map((techSkill, index) => {
        const isHidden = index === 0 || index === paginationItems.length - 1;
        return (
          <li
            class={styles.control}
            style={{
              'view-transition-name': techSkill.href,
            }}
            aria-hidden={isHidden || undefined}
          >
            <a
              href={
                index === skillIndex || isHidden
                  ? undefined
                  : translatePath(`skills/${techSkill.href}/`)
              }
              aria-label={`${t_skills('go_to')} ${techSkill.title}`}
              title={`${t_skills('go_to')} ${techSkill.title}`}
              aria-current={index === skillIndex}
              data-disabled={isHidden || index === skillIndex || undefined}
              data-index={index}
              data-main-index={techSkills.indexOf(techSkill)}
              {...(index === skillIndex ? {} : { ['data-arrow-nav']: 'true' })}
            >
              <span class="sr-only">{`${t_skills('go_to')} ${techSkill.title}`}</span>
            </a>
          </li>
        );
      })
    }
  </ul>
</div>
