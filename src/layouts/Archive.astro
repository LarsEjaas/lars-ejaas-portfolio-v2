---
import Layout from '@layouts/Root.astro';
import FloatingBalloons from '@components/floatingBalloons/FloatingBalloons.astro';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import styles from './archive.module.css';
import WorkCard from '@components/workCard/WorkCard.astro';
import LarsEjaasComV1HeaderImage from '@assets/images/lars_ejaas_com_v1.png';
import PageLabel from '@components/pageLabel/PageLabel.astro';
import { newsItems } from '@content/newsItems';
import { MAX_NUMBER_OF_ITEMS } from '@components/carousel/Carousel.astro';
import type { DistributiveOmit, ImageModule } from '@customTypes/index';
import type { OpenGraph } from '@customTypes/seo';
import { isExternalLink } from '@utils/misc';
import ArticleCard from '@components/carousel/ArticleCard.astro';
const newsImages = import.meta.glob('@assets/newsImages/*.{jpg,png}');

type Props = {
  title: string;
  description: string;
  inert: boolean;
  seo: { openGraph: DistributiveOmit<OpenGraph, 'type'>; noIndex: boolean };
};

const lang = getLangFromUrl(Astro.url);
const { title, description, inert, seo } = Astro.props;
const t_arch = useTranslations(lang, 'archive');

const newsGridItems =
  newsItems[lang].length > MAX_NUMBER_OF_ITEMS
    ? newsItems[lang].slice(0, -MAX_NUMBER_OF_ITEMS)
    : undefined;
---

<Layout
  inert={inert}
  seo={{
    metaData: { title, description },
    openGraph: {
      image: {
        name: seo.openGraph.image.name,
        alt: seo.openGraph.image.alt,
      },
    },
    ...(seo.noIndex && { noIndex: seo.noIndex }),
  }}
>
  <!-- Modals can be inserted as a child here in the slot -->
  <slot slot="body-top" />
  <div class="presentation">
    <PageLabel title={t_arch('archive_title')} iconImage="archive" />
    <div>
      <h2>
        {t_arch('looking_for_old_content')}
      </h2>
      <p class="body-text">{t_arch('welcome_to_memory_lane')}</p>
    </div>
  </div>
  <div class={styles.animationTimeline}>
    <FloatingBalloons class={styles.baloons} balloonColor="bluemunsell" />
    <div class="fullgrid">
      <h2>
        {t_arch('old_version_of_my_website')}
      </h2>
      <p class="body-text">{t_arch('curious_how_my_website')}</p>
    </div>
    <div class={styles.firstGridColumn}>
      <WorkCard
        className={styles.animatedWorkCard}
        inert={inert}
        id="larsEjaasComVersionOne"
        animatedHeader
        href={lang === 'en'
          ? 'https://larsejaasv1.netlify.app/en'
          : 'https://larsejaasv1.netlify.app'}
        animationDelay={0}
        viewTransitionName="lars-ejaas-card"
        subHeadline={t_arch('larsejaas_v1_subheadline')}
        headerImage={LarsEjaasComV1HeaderImage}
        headerImageAlt={t_arch('lars_ejaas_v1_image_alt')}
        date={t_arch('lars_ejaas_v1_date')}
      >
        <p class="small-body-text">
          {t_arch('lars_ejaas_com_v1_description')}
        </p>
      </WorkCard>
    </div>
    {
      newsGridItems && (
        <>
          <div class={`fullgrid ${styles.animatedText}`} id="oldNews">
            <h2>{t_arch('old_news')}</h2>
            <p class="body-text">{t_arch('browse_through')}</p>
          </div>
          <div class={`fullgrid ${styles.newsGrid}`}>
            {[...newsGridItems].reverse().map(async (item, index) => {
              const imageName = item.imageSrc;
              const imageImport = Object.entries(newsImages).find(([path]) =>
                path.includes(imageName)
              );

              if (!imageImport) {
                throw new Error(`News image not found for: ${imageName}`);
              }
              const ImageComponent = ((await imageImport[1]()) as ImageModule)
                .default;

              const isExtURL = isExternalLink(item.href);

              return (
                <a
                  class={styles.articleCard}
                  data-arrow-nav="true"
                  id={`card${index}`}
                  href={item.href}
                  {...(isExtURL ? { target: '_blank', rel: 'noreferrer' } : {})}
                >
                  <ArticleCard
                    title={item.title}
                    description={item.description}
                    date={item.date}
                    imageAlt={item.imageAlt}
                    outline={item.outline}
                    index={0}
                    image={ImageComponent}
                  />
                </a>
              );
            })}
          </div>
        </>
      )
    }
  </div>
</Layout>
