---
import Layout from '@layouts/Root.astro';
import FloatingBalloons from '@components/floatingBalloons/FloatingBalloons.astro';
import PageLabel from '@components/pageLabel/PageLabel.astro';
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import PresentationCard from '@components/presentationCard/PresentationCard.astro';
import styles from './skills.module.css';
import StarRating from '@components/starRating/starRating.astro';
import TechSkillsMarquee from '@components/techSkillsMarquee/TechSkillsMarquee.astro';
import type { SkillRating } from '@customTypes/skillTypes';
import SkillCardPagination from '@components/skillCardPagination/SkillCardPagination.astro';
import type { SVGFileType, DistributiveOmit } from '@customTypes/index';
import type { OpenGraph } from '@customTypes/seo';

type Props = {
  title: string;
  description: string;
  inert: boolean;
  techSkill: TechSkillProps;
  seo: { openGraph: DistributiveOmit<OpenGraph, 'type'>; noIndex: boolean };
};

export type TechSkillProps = {
  title: string;
  description: (_props: Record<string, never>) => any;
  imageSrc?: SVGFileType;
  imageAlt?: string;
  href?: string;
  rating?: SkillRating;
  iconImage?: ImageMetadata;
};

const lang = getLangFromUrl(Astro.url);
const { title, description, inert, techSkill, seo } = Astro.props;

const {
  title: skillTitle,
  description: skillDescription,
  iconImage,
  imageAlt: skillImageAlt,
  rating: skillRating,
} = techSkill;
const t_skills = useTranslations(lang, 'skills');

const DescriptionComponent = skillDescription;
---

<script>
  import { storeScrollPositionOnClick } from '@utils/scrollPosition';
  /** Always scroll to the top of the skill presentation when navigating to another skill */
  const skillPresentation = window.skillPresentation;
  const paginationElements = Array.from(
    window.skillPagination?.querySelectorAll('a:not([data-disabled])') || []
  ).filter((item) => item instanceof HTMLAnchorElement);
  const tileSceneElements = Array.from(
    window.skillTileScene?.querySelectorAll('a:not([data-active])') || []
  ).filter((item) => item instanceof HTMLAnchorElement);
  const elements = [...Array.from(paginationElements), ...tileSceneElements];
  if (skillPresentation) {
    elements.forEach((anchor) =>
      storeScrollPositionOnClick(anchor, skillPresentation, -16)
    );
  }
</script>
<Layout
  inert={inert}
  seo={{
    metaData: { title, description },
    openGraph: {
      image: {
        name: seo.openGraph.image.name,
        alt: seo.openGraph.image.alt,
      },
      ...(seo.noIndex && { noIndex: seo.noIndex }),
    },
  }}
>
  <!-- Modals can be inserted as a child here in the slot -->
  <slot slot="body-top" />
  <div class="presentation">
    <PageLabel title={t_skills('skills_title')} iconImage="skillset" />
    <div>
      <h2>
        {t_skills('browse_my_tech_skills')}
      </h2>
      <p class="body-text">{t_skills('along_the_way')}</p>
    </div>
  </div>
  <FloatingBalloons class={styles.floatingBalloons} balloonColor="flirt" />
  <div id="skillPresentation">
    <PresentationCard
      gradientColor="flirt"
      title={skillTitle}
      iconImage={iconImage}
      iconImageAlt={skillImageAlt}
      responsiveSquircleSize={true}
      inert={inert}
      iconImageViewTransitionName="icon-image"
    >
      <div class={styles.presentationCardContent}>
        {DescriptionComponent && <DescriptionComponent />}
        <div class={styles.proficiencyRating}>
          {
            !!skillRating && [
              <p class="stylized-lead-text">
                {t_skills('proficiency_rating')}
              </p>,
              <StarRating rating={skillRating} />,
            ]
          }
        </div>
      </div>
    </PresentationCard>
    <SkillCardPagination title={skillTitle} />
  </div>
  <TechSkillsMarquee />
</Layout>
