name: Code Quality Checks

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    env:
      FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      NOREPLY_PRIVATE_EMAIL_USER: ${{ secrets.NOREPLY_PRIVATE_EMAIL_USER }}
      PRIVATE_EMAIL_USER: ${{ secrets.PRIVATE_EMAIL_USER }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      SITE_URL: ${{ secrets.SITE_URL }}
      PUBLIC_PIWIK_SITE_ID: ${{ secrets.PUBLIC_PIWIK_SITE_ID }}
      PUBLIC_PIWIK_TRACKER_URL: ${{ secrets.PUBLIC_PIWIK_TRACKER_URL }}
      PUBLIC_PIWIK_DOMAINS: ${{ secrets.PUBLIC_PIWIK_DOMAINS }}
      BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
      BLUESKY_APP_PASSWORD: ${{ secrets.BLUESKY_APP_PASSWORD }}
      SERVERLESS_AUTH_TOKEN: ${{ secrets.SERVERLESS_AUTH_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm clean-install --include=dev

      - name: Restore image cache
        id: cache-images
        uses: actions/cache@v4
        with:
          path: .cache/images
          key: image-cache-${{ hashFiles('src/assets/**/*') }}
          restore-keys: |
            image-cache-

      - name: Optimize images
        if: steps.cache-images.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/images
          npx imagemin src/assets/* --out-dir=.cache/images

      - name: Sync optimized images to project
        run: |
          cp -r .cache/images/* src/assets/

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build Project
        # Skip build on main branch
        if: github.ref != 'refs/heads/main'
        run: npm run build
